{"name":"Socket communication using GoogleProtocolBuffer ","tagline":"Client and Server socket communication using google protocol buffer (shows how to serialize and deserialize data)","body":"**Introduction to Protocol Buffers:**    \r\n     Protocol Buffers are a way of encoding structured data in efficient yet extensible format\". It allows you to \r\nspecify the schema for your data.\r\n\r\nSuppose you want to send data consists of Employee details like name, id, email across network. How would you serialize and deserialize structured data like this. There are few ways to solve this problem.\r\n\r\n1.raw in-memory data structures can be sent/saved in binary form. Over time, this is a fragile approach, as the receiving/reading code must be compiled with exactly the same memory layout, endianness, etc.       \r\n2. You can invent an ad-hoc way to encode the data items into a single string â€“ such as encoding 4 ints as \"12:3:-23:67\". This is a simple and flexible approach, although it does require writing one-off encoding and parsing code, and the parsing imposes a small run-time cost. This works best for encoding very simple data.      \r\n3. Serialize the data to XML. This approach can be very attractive since it is (sort of) human readable and there are binding libraries for lots of languages. This can be a good choice if you want to share data with other applications/projects. However, XML is notoriously space intensive, and encoding/decoding it can impose a huge performance penalty on applications. Also, navigating an XML DOM tree is considerably more complicated than navigating simple fields in a class normally would be. \r\n\r\n**Come to Protocol buffer world:**   \r\nWith protocol buffers, you write a .proto description of the data structure you wish to store. From that, the protocol buffer compiler creates a class that implements automatic encoding and parsing of the protocol buffer data with an efficient binary format. For our example program, the Employee detail can be written as follows in .proto file.    \r\nmessage Employee{   \r\n     string name = 1;   \r\n     int32 id = 2;   \r\n     string email = 3;   \r\n}    \r\nFields are optional by default but if you want to configure some field as a mandatory part of the message. Use following:    \r\nmessage Employee{    \r\n     required string name = 1;    \r\n     int32 id = 2;    \r\n     string email = 3;    \r\n}      \r\n\r\nPlease refer following for extensive details of CPP API and protocol buffers:\r\nhttps://developers.google.com/protocol-buffers/docs/overview\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}